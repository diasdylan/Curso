# Empacotador de módulo estático

Seu objetivo é empacotar todos os módulos de uma aplicação a partir de um ou mais pontos de entrada em um ou mais bundles, que são arquivos estáticos contendo tudo que aplicação precisa para funcionar.

O webpack constrói um grafo de dependências para os pontos de entrada, o que permite saber exatamente quais módulos são necessários.

https://webpack.js.org/

## Principais conceitos

- **Entry**  
  Pontos de entrada de onde o webpack procurará por arquivos para empacotar.

- **Output**  
  A saída resultante do processo de empacotamento dos módulos.

- **Loaders**  
  Por padrão, o webpack entende apenas javascript e JSON.  
  Loaders permitem que o webpack consiga entender outros tipos de arquivos (como css, por exemplo), transformando-os em módulos válidos e incluindo-os no grafo de dependências.

- **Plugins**  
  São utilizados para estender o comportamento do webpack, realizando tarefas mais elaboradas que os loaders (que apenas transformam módulos).

## Benefícios

- Possibilidade de trabalhar com módulos de forma fácil, inclusive módulos CommonJS.
- Possibilidade de automatizar o gerenciamento dos módulos e dependências da aplicação.
- Empacotar os módulos em arquivos estáticos permite que eles sejam servidos na web de forma mais fácil e rápida.

## Adoção no mercado

Webpack é uma das soluções mais utilizadas do mercado para gerenciamento de assets estáticos, sendo utilizado por grandes empresas e frameworks populares como Next.js, Vue.js, etc.


## Commands ran: 

npm init -y

## -D = dev env

npm i -D webpack
npm i -D webpack-cli
npm i dayjs

## If the modules folder is gone/was deleted just reran the install command
npm i -D @babel/core @babel/cli @babel/preset-env

## The webpack.config.js file has to be in the root folder of the project

## Loaders class - OnebitCode 208 JS 4

command ran: npm i --save-dev style-loader css-loader